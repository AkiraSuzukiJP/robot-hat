# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, SunFounder
# This file is distributed under the same license as the SunFounder Robot
# HAT package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#

msgid ""
msgstr ""
"Project-Id-Version: SunFounder Robot HAT \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-30 09:56+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: de\n"
"Language-Team: de <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../api_i2c.rst:4
msgid "class ``I2C``"
msgstr ""

#: ../api_i2c.rst:6
msgid "**Example**"
msgstr ""

#: ../api_i2c.rst:30
msgid "For more information on the I2C protocol, see checkout adc.py and pwm.py"
msgstr ""

#: ../api_i2c.rst:32
msgid "**API**"
msgstr ""

#: of robot_hat.i2c.I2C:1
msgid "Bases: :py:class:`~robot_hat.basic._Basic_class`"
msgstr ""

#: of robot_hat.i2c.I2C:1
msgid "I2C bus read/write functions"
msgstr ""

#: of robot_hat.i2c.I2C.__init__:1
msgid "Initialize the I2C bus"
msgstr ""

#: of robot_hat.i2c.I2C.__init__ robot_hat.i2c.I2C.mem_read
#: robot_hat.i2c.I2C.mem_write robot_hat.i2c.I2C.read robot_hat.i2c.I2C.write
msgid "Parameters"
msgstr ""

#: of robot_hat.i2c.I2C.__init__:3
msgid "I2C device address"
msgstr ""

#: of robot_hat.i2c.I2C.__init__:5
msgid "I2C bus number"
msgstr ""

#: of robot_hat.i2c.I2C.scan:1
msgid "Scan the I2C bus for devices"
msgstr ""

#: of robot_hat.i2c.I2C.is_avaliable robot_hat.i2c.I2C.mem_read
#: robot_hat.i2c.I2C.read robot_hat.i2c.I2C.scan
msgid "Returns"
msgstr ""

#: of robot_hat.i2c.I2C.scan:3
msgid "List of I2C addresses of devices found"
msgstr ""

#: of robot_hat.i2c.I2C.is_avaliable robot_hat.i2c.I2C.mem_read
#: robot_hat.i2c.I2C.read robot_hat.i2c.I2C.scan
msgid "Return type"
msgstr ""

#: of robot_hat.i2c.I2C.write:1
msgid "Write data to the I2C device"
msgstr ""

#: of robot_hat.i2c.I2C.write:3
msgid "Data to write"
msgstr ""

#: of robot_hat.i2c.I2C.write
msgid "raises"
msgstr ""

#: of robot_hat.i2c.I2C.write:5
msgid "ValueError if write is not an int, list or bytearray"
msgstr ""

#: of robot_hat.i2c.I2C.read:1
msgid "Read data from I2C device"
msgstr ""

#: of robot_hat.i2c.I2C.mem_read:3 robot_hat.i2c.I2C.read:3
msgid "Number of bytes to receive"
msgstr ""

#: of robot_hat.i2c.I2C.read:5
msgid "Received data"
msgstr ""

#: of robot_hat.i2c.I2C.mem_write:1
msgid "Send data to specific register address"
msgstr ""

#: of robot_hat.i2c.I2C.mem_write:3
msgid "Data to send, int, list or bytearray"
msgstr ""

#: of robot_hat.i2c.I2C.mem_read:5 robot_hat.i2c.I2C.mem_write:5
msgid "Register address"
msgstr ""

#: of robot_hat.i2c.I2C.mem_write
msgid "Raises"
msgstr ""

#: of robot_hat.i2c.I2C.mem_write:7
msgid "If data is not int, list, or bytearray"
msgstr ""

#: of robot_hat.i2c.I2C.mem_read:1
msgid "Read data from specific register address"
msgstr ""

#: of robot_hat.i2c.I2C.mem_read:7
msgid "Received bytearray data or False if error"
msgstr ""

#: of robot_hat.i2c.I2C.is_avaliable:1
msgid "Check if the I2C device is avaliable"
msgstr ""

#: of robot_hat.i2c.I2C.is_avaliable:3
msgid "True if the I2C device is avaliable, False otherwise"
msgstr ""

