# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, SunFounder
# This file is distributed under the same license as the SunFounder Robot
# HAT package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#

msgid ""
msgstr ""
"Project-Id-Version: SunFounder Robot HAT \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-30 09:56+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: de\n"
"Language-Team: de <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../api_pin.rst:4
msgid "class ``Pin``"
msgstr ""

#: ../api_pin.rst:6
msgid "**Example**"
msgstr ""

#: ../api_pin.rst:38
msgid "**API**"
msgstr ""

#: of robot_hat.pin.Pin:1
msgid "Bases: :py:class:`~robot_hat.basic._Basic_class`"
msgstr ""

#: of robot_hat.pin.Pin:1
msgid "Pin manipulation class"
msgstr ""

#: ../docstring RPi.GPIO.OUT:1 of
msgid "Pin mode output"
msgstr ""

#: ../docstring RPi.GPIO.IN:1 of
msgid "Pin mode input"
msgstr ""

#: ../docstring RPi.GPIO.FALLING:1 RPi.GPIO.RISING:1 of
msgid "Pin interrupt falling"
msgstr ""

#: ../docstring RPi.GPIO.BOTH:1 of
msgid "Pin interrupt both rising and falling"
msgstr ""

#: ../docstring RPi.GPIO.PUD_UP:1 of
msgid "Pin internal pull up"
msgstr ""

#: ../docstring RPi.GPIO.PUD_DOWN:1 of
msgid "Pin internal pull down"
msgstr ""

#: ../docstring of robot_hat.Pin.PULL_NONE:1
msgid "Pin internal pull none"
msgstr ""

#: of robot_hat.pin.Pin.__init__:1
msgid "Initialize a pin"
msgstr ""

#: of robot_hat.pin.Pin.__call__ robot_hat.pin.Pin.__init__
#: robot_hat.pin.Pin.dict robot_hat.pin.Pin.irq robot_hat.pin.Pin.setup
#: robot_hat.pin.Pin.value
msgid "Parameters"
msgstr ""

#: of robot_hat.pin.Pin.__init__:3
msgid "pin number of Raspberry Pi"
msgstr ""

#: of robot_hat.pin.Pin.__init__:5 robot_hat.pin.Pin.setup:3
msgid "pin mode(IN/OUT)"
msgstr ""

#: of robot_hat.pin.Pin.__init__:7 robot_hat.pin.Pin.setup:5
msgid "pin pull up/down(PUD_UP/PUD_DOWN/PUD_NONE)"
msgstr ""

#: of robot_hat.pin.Pin.setup:1
msgid "Setup the pin"
msgstr ""

#: of robot_hat.pin.Pin.dict:1
msgid "Set/get the pin dictionary"
msgstr ""

#: of robot_hat.pin.Pin.dict:3
msgid "pin dictionary, leave it empty to get the dictionary"
msgstr ""

#: of robot_hat.pin.Pin.__call__ robot_hat.pin.Pin.dict robot_hat.pin.Pin.high
#: robot_hat.pin.Pin.low robot_hat.pin.Pin.name robot_hat.pin.Pin.off
#: robot_hat.pin.Pin.on robot_hat.pin.Pin.value
msgid "Returns"
msgstr ""

#: of robot_hat.pin.Pin.dict:5
msgid "pin dictionary"
msgstr ""

#: of robot_hat.pin.Pin.__call__ robot_hat.pin.Pin.dict robot_hat.pin.Pin.high
#: robot_hat.pin.Pin.low robot_hat.pin.Pin.name robot_hat.pin.Pin.off
#: robot_hat.pin.Pin.on robot_hat.pin.Pin.value
msgid "Return type"
msgstr ""

#: of robot_hat.pin.Pin.__call__:1 robot_hat.pin.Pin.value:1
msgid "Set/get the pin value"
msgstr ""

#: of robot_hat.pin.Pin.__call__:3 robot_hat.pin.Pin.value:3
msgid "pin value, leave it empty to get the value(0/1)"
msgstr ""

#: of robot_hat.pin.Pin.__call__:5 robot_hat.pin.Pin.value:5
msgid "pin value(0/1)"
msgstr ""

#: of robot_hat.pin.Pin.on:1
msgid "Set pin on(high)"
msgstr ""

#: of robot_hat.pin.Pin.high:3 robot_hat.pin.Pin.on:3
msgid "pin value(1)"
msgstr ""

#: of robot_hat.pin.Pin.off:1
msgid "Set pin off(low)"
msgstr ""

#: of robot_hat.pin.Pin.low:3 robot_hat.pin.Pin.off:3
msgid "pin value(0)"
msgstr ""

#: of robot_hat.pin.Pin.high:1
msgid "Set pin high(1)"
msgstr ""

#: of robot_hat.pin.Pin.low:1
msgid "Set pin low(0)"
msgstr ""

#: of robot_hat.pin.Pin.irq:1
msgid "Set the pin interrupt"
msgstr ""

#: of robot_hat.pin.Pin.irq:3
msgid "interrupt handler callback function"
msgstr ""

#: of robot_hat.pin.Pin.irq:5
msgid "interrupt trigger(RISING, FALLING, RISING_FALLING)"
msgstr ""

#: of robot_hat.pin.Pin.irq:7
msgid "interrupt bouncetime in miliseconds"
msgstr ""

#: of robot_hat.pin.Pin.name:1
msgid "Get the pin name"
msgstr ""

#: of robot_hat.pin.Pin.name:3
msgid "pin name"
msgstr ""

