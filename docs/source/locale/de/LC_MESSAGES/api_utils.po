# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, SunFounder
# This file is distributed under the same license as the SunFounder Robot
# HAT package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#

msgid ""
msgstr ""
"Project-Id-Version: SunFounder Robot HAT \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-30 09:56+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: de\n"
"Language-Team: de <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../api_utils.rst:2
msgid "module ``utils``"
msgstr ""

#: of robot_hat.utils.set_volume:1
msgid "Set volume"
msgstr ""

#: of robot_hat.utils.get_ip robot_hat.utils.is_installed
#: robot_hat.utils.mapping robot_hat.utils.run_command
#: robot_hat.utils.set_volume
msgid "Parameters"
msgstr ""

#: of robot_hat.utils.set_volume:3
msgid "volume(0~100)"
msgstr ""

#: of robot_hat.utils.run_command:1
msgid "Run command and return status and output"
msgstr ""

#: of robot_hat.utils.run_command:3
msgid "command to run"
msgstr ""

#: of robot_hat.utils.get_battery_voltage robot_hat.utils.get_ip
#: robot_hat.utils.is_installed robot_hat.utils.mapping
#: robot_hat.utils.run_command
msgid "Returns"
msgstr ""

#: of robot_hat.utils.run_command:5
msgid "status, output"
msgstr ""

#: of robot_hat.utils.get_battery_voltage robot_hat.utils.get_ip
#: robot_hat.utils.is_installed robot_hat.utils.mapping
#: robot_hat.utils.run_command
msgid "Return type"
msgstr ""

#: of robot_hat.utils.is_installed:1
msgid "Check if command is installed"
msgstr ""

#: of robot_hat.utils.is_installed:3
msgid "command to check"
msgstr ""

#: of robot_hat.utils.is_installed:5
msgid "True if installed"
msgstr ""

#: of robot_hat.utils.mapping:1
msgid "Map value from one range to another range"
msgstr ""

#: of robot_hat.utils.mapping:3
msgid "value to map"
msgstr ""

#: of robot_hat.utils.mapping:5
msgid "input minimum"
msgstr ""

#: of robot_hat.utils.mapping:7
msgid "input maximum"
msgstr ""

#: of robot_hat.utils.mapping:9
msgid "output minimum"
msgstr ""

#: of robot_hat.utils.mapping:11
msgid "output maximum"
msgstr ""

#: of robot_hat.utils.mapping:13
msgid "mapped value"
msgstr ""

#: of robot_hat.utils.get_ip:1
msgid "Get IP address"
msgstr ""

#: of robot_hat.utils.get_ip:3
msgid "interfaces to check"
msgstr ""

#: of robot_hat.utils.get_ip:5
msgid "IP address or False if not found"
msgstr ""

#: of robot_hat.utils.reset_mcu:1
msgid "Reset mcu on Robot Hat."
msgstr ""

#: of robot_hat.utils.reset_mcu:3
msgid ""
"This is helpful if the mcu somehow stuck in a I2C data transfer loop, and"
" Raspberry Pi getting IOError while Reading ADC, manipulating PWM, etc."
msgstr ""

#: of robot_hat.utils.get_battery_voltage:1
msgid "Get battery voltage"
msgstr ""

#: of robot_hat.utils.get_battery_voltage:3
msgid "battery voltage(V)"
msgstr ""

