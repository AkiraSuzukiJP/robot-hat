# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, SunFounder
# This file is distributed under the same license as the SunFounder Robot HAT package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Robot HAT \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-15 15:42+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../onboard_mcu.rst:4
msgid "On-Board MCU"
msgstr ""

#: ../onboard_mcu.rst:6
msgid "The Robot HAT comes with an AT32F415CBT7 microcontroller from Artery. It is an ARM Cortex-M4 processor with a maximum clock frequency of 150MHz. The microcontroller has 256KB of Flash memory and 32KB of SRAM."
msgstr ""

#: ../onboard_mcu.rst:10
msgid "The onboard PWM and ADC are driven by the microcontroller. Communication between the Raspberry Pi and the microcontroller is established via the I2C interface. The I2C address used for communication is 0x14 (7-bit address format)."
msgstr ""

#: ../onboard_mcu.rst:16
msgid "Introduce"
msgstr ""

#: ../onboard_mcu.rst:18
msgid "The on board MCU RESET pin is connected to Raspberry Pi GPIO 5, or ``MCURST`` for :py:class:`robot_hat.Pin`. The MCU using 7-bit address ``0x14``."
msgstr ""

#: ../onboard_mcu.rst:21
msgid "ADC"
msgstr ""

#: ../onboard_mcu.rst:23
msgid "Register addresses is 3 byte, 0x170000 to 0x140000 are ADC channels 0 to 3. The ADC precision is 12 bit, and the value is 0 to 4095. See more details in :py:class:`robot_hat.ADC`."
msgstr ""

#: ../onboard_mcu.rst:30
#: ../onboard_mcu.rst:93
#: ../onboard_mcu.rst:133
#: ../onboard_mcu.rst:153
msgid "Address"
msgstr ""

#: ../onboard_mcu.rst:30
#: ../onboard_mcu.rst:93
#: ../onboard_mcu.rst:133
#: ../onboard_mcu.rst:153
msgid "Description"
msgstr ""

#: ../onboard_mcu.rst:32
msgid "``0x170000``"
msgstr ""

#: ../onboard_mcu.rst:32
msgid "ADC channel 0"
msgstr ""

#: ../onboard_mcu.rst:34
msgid "``0x160000``"
msgstr ""

#: ../onboard_mcu.rst:34
msgid "ADC channel 1"
msgstr ""

#: ../onboard_mcu.rst:36
msgid "``0x150000``"
msgstr ""

#: ../onboard_mcu.rst:36
msgid "ADC channel 2"
msgstr ""

#: ../onboard_mcu.rst:38
msgid "``0x140000``"
msgstr ""

#: ../onboard_mcu.rst:38
msgid "ADC channel 3"
msgstr ""

#: ../onboard_mcu.rst:40
msgid "``0x130000``"
msgstr ""

#: ../onboard_mcu.rst:40
msgid "ADC channel 4 (Battery Level)"
msgstr ""

#: ../onboard_mcu.rst:43
msgid "**Example:**"
msgstr ""

#: ../onboard_mcu.rst:45
msgid "Read Channel 0 ADC value:"
msgstr ""

#: ../onboard_mcu.rst:60
msgid "PWM"
msgstr ""

#: ../onboard_mcu.rst:62
msgid "PWM have 1 byte register with 2 byte values."
msgstr ""

#: ../onboard_mcu.rst:65
msgid "Changing PWM Frequency"
msgstr ""

#: ../onboard_mcu.rst:67
msgid "Frequency is defined with prescaler and period."
msgstr ""

#: ../onboard_mcu.rst:69
msgid "To set frequency first you need to define the period you want. Like on Arduino, normaly is 255, or like PCA9685 is 4095."
msgstr ""

#: ../onboard_mcu.rst:72
msgid "CPU clock is 72MHz, Then you can calculate the prescaler from your desire frequency"
msgstr ""

#: ../onboard_mcu.rst:74
msgid "prescaler = 72MHz / (Period + 1) / Frequency - 1"
msgstr ""

#: ../onboard_mcu.rst:78
msgid "Or if you don't care about the period, there's a way to calculate both period and prescaler from frequency. See :py:func:`robot_hat.PWM.freq`."
msgstr ""

#: ../onboard_mcu.rst:82
msgid "Pulse width"
msgstr ""

#: ../onboard_mcu.rst:84
msgid "To control the channel pulse width is rather simple, just write the value to the register."
msgstr ""

#: ../onboard_mcu.rst:86
msgid "**But** what is the value? If you want to set the PWM to 50% pulse width, you need to know exactly what the period is. Base on the above calculation, if you set the period to 4095, then set pulse value to 2048 is about 50% pulse width."
msgstr ""

#: ../onboard_mcu.rst:95
msgid "``0x20``"
msgstr ""

#: ../onboard_mcu.rst:95
msgid "Set PWM channel 0 **On Value**"
msgstr ""

#: ../onboard_mcu.rst:97
msgid "``0x21``"
msgstr ""

#: ../onboard_mcu.rst:97
msgid "Set PWM channel 1 **On Value**"
msgstr ""

#: ../onboard_mcu.rst:99
msgid "``0x22``"
msgstr ""

#: ../onboard_mcu.rst:99
msgid "Set PWM channel 2 **On Value**"
msgstr ""

#: ../onboard_mcu.rst:101
msgid "``0x23``"
msgstr ""

#: ../onboard_mcu.rst:101
msgid "Set PWM channel 3 **On Value**"
msgstr ""

#: ../onboard_mcu.rst:103
msgid "``0x24``"
msgstr ""

#: ../onboard_mcu.rst:103
msgid "Set PWM channel 4 **On Value**"
msgstr ""

#: ../onboard_mcu.rst:105
msgid "``0x25``"
msgstr ""

#: ../onboard_mcu.rst:105
msgid "Set PWM channel 5 **On Value**"
msgstr ""

#: ../onboard_mcu.rst:107
msgid "``0x26``"
msgstr ""

#: ../onboard_mcu.rst:107
msgid "Set PWM channel 6 **On Value**"
msgstr ""

#: ../onboard_mcu.rst:109
msgid "``0x27``"
msgstr ""

#: ../onboard_mcu.rst:109
msgid "Set PWM channel 7 **On Value**"
msgstr ""

#: ../onboard_mcu.rst:111
msgid "``0x28``"
msgstr ""

#: ../onboard_mcu.rst:111
msgid "Set PWM channel 8 **On Value**"
msgstr ""

#: ../onboard_mcu.rst:113
msgid "``0x29``"
msgstr ""

#: ../onboard_mcu.rst:113
msgid "Set PWM channel 9 **On Value**"
msgstr ""

#: ../onboard_mcu.rst:115
msgid "``0x2A``"
msgstr ""

#: ../onboard_mcu.rst:115
msgid "Set PWM channel 10 **On Value**"
msgstr ""

#: ../onboard_mcu.rst:117
msgid "``0x2B``"
msgstr ""

#: ../onboard_mcu.rst:117
msgid "Set PWM channel 11 **On Value**"
msgstr ""

#: ../onboard_mcu.rst:119
msgid "``0x2C``"
msgstr ""

#: ../onboard_mcu.rst:119
msgid "Set Motor 2 speed **On Value**"
msgstr ""

#: ../onboard_mcu.rst:121
msgid "``0x2D``"
msgstr ""

#: ../onboard_mcu.rst:121
msgid "Set Motor 1 speed **On Value**"
msgstr ""

#: ../onboard_mcu.rst:125
msgid "Prescaler"
msgstr ""

#: ../onboard_mcu.rst:127
msgid "Register from 0x40 is to set the PWM prescaler. ranges from 0~65535. There are only 4 timers for all 14 channels. See `PWM Timer(IMPORTANT)`_"
msgstr ""

#: ../onboard_mcu.rst:135
msgid "``0x40``"
msgstr ""

#: ../onboard_mcu.rst:135
msgid "Set timer 0 **Prescaler**"
msgstr ""

#: ../onboard_mcu.rst:137
msgid "``0x41``"
msgstr ""

#: ../onboard_mcu.rst:137
msgid "Set timer 1 **Prescaler**"
msgstr ""

#: ../onboard_mcu.rst:139
msgid "``0x42``"
msgstr ""

#: ../onboard_mcu.rst:139
msgid "Set timer 2 **Prescaler**"
msgstr ""

#: ../onboard_mcu.rst:141
msgid "``0x43``"
msgstr ""

#: ../onboard_mcu.rst:141
msgid "Set timer 3 **Prescaler**"
msgstr ""

#: ../onboard_mcu.rst:145
msgid "Period"
msgstr ""

#: ../onboard_mcu.rst:147
msgid "Register from 0x44 is to set the PWM period. ranges from 0~65535. There are only 4 timers for all 14 channels. See `PWM Timer(IMPORTANT)`_"
msgstr ""

#: ../onboard_mcu.rst:155
msgid "``0x44``"
msgstr ""

#: ../onboard_mcu.rst:155
msgid "Set timer 0 **Period**"
msgstr ""

#: ../onboard_mcu.rst:157
msgid "``0x45``"
msgstr ""

#: ../onboard_mcu.rst:157
msgid "Set timer 1 **Period**"
msgstr ""

#: ../onboard_mcu.rst:159
msgid "``0x46``"
msgstr ""

#: ../onboard_mcu.rst:159
msgid "Set timer 2 **Period**"
msgstr ""

#: ../onboard_mcu.rst:161
msgid "``0x47``"
msgstr ""

#: ../onboard_mcu.rst:161
msgid "Set timer 3 **Period**"
msgstr ""

#: ../onboard_mcu.rst:165
msgid "PWM Timer(IMPORTANT)"
msgstr ""

#: ../onboard_mcu.rst:167
msgid "What is PWM Timer? PWM Timer is a tool to turn on and off the PWM channel for you."
msgstr ""

#: ../onboard_mcu.rst:169
msgid "The MCU only have 4 timers for PWM: which means you cannot set frequency on different channels at with the same timer."
msgstr ""

#: ../onboard_mcu.rst:172
msgid "Example: if you set frequency on channel 0, channel 1, 2, 3 will be affected. If you change channel 2 frequency, channel 0, 1, 3 will be override."
msgstr ""

#: ../onboard_mcu.rst:175
msgid "This happens like if you want to control both a passive buzzer (who changes frequency all the time) and servo (who needs a fix frequency of 50Hz). Then you should seperate them into two different timer."
msgstr ""

#: ../onboard_mcu.rst:181
msgid "Timer"
msgstr ""

#: ../onboard_mcu.rst:181
msgid "PWM Channel"
msgstr ""

#: ../onboard_mcu.rst:183
msgid "Timer 0"
msgstr ""

#: ../onboard_mcu.rst:183
msgid "0, 1, 2, 3"
msgstr ""

#: ../onboard_mcu.rst:185
msgid "Timer 1"
msgstr ""

#: ../onboard_mcu.rst:185
msgid "4, 5, 6, 7"
msgstr ""

#: ../onboard_mcu.rst:187
msgid "Timer 2"
msgstr ""

#: ../onboard_mcu.rst:187
msgid "8, 9, 10, 11"
msgstr ""

#: ../onboard_mcu.rst:189
msgid "Timer 3"
msgstr ""

#: ../onboard_mcu.rst:189
msgid "12, 13(for motors)"
msgstr ""

#: ../onboard_mcu.rst:193
msgid "Example"
msgstr ""

#: ../onboard_mcu.rst:213
msgid "Reset MCU"
msgstr ""

#: ../onboard_mcu.rst:215
msgid "Currently the firmware reads a fix 3 byte value, then it can return ADC values or control PWM. Thats why ADC register need 3byte with the latter 2 byte is 0."
msgstr ""

#: ../onboard_mcu.rst:218
msgid "And if your program is interrupted in the middle of the communication, the firmware may stuck and offset the data. Even we have timeout on waiting on 3 byte datas."
msgstr ""

#: ../onboard_mcu.rst:220
msgid "If so, you need to reset the MCU. To reset it. You can use the robot_hat command:"
msgstr ""

#: ../onboard_mcu.rst:226
msgid "Or you can do it in your python code:"
msgstr ""

#: ../onboard_mcu.rst:233
msgid "Or you can just pull down the reset pin (GPIO 5) for 10 ms, then pull it back up for another 10ms, as that's what ``reset_mcu`` dose."
msgstr ""
